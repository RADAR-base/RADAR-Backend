configurations {
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

//---------------------------------------------------------------------------//
// Source Set                                                                //
//----------
// -----------------------------------------------------------------//
sourceSets {
    integrationTest {
        java {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
        }
        resources {
            srcDir 'src/integrationTest/resources'
        }
    }
}

dependencies {
    // Testing
    testImplementation group: 'junit', name: 'junit', version: junitVersion
    testImplementation group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: hamcrestVersion

    // Mock mail server
    testImplementation group: 'org.subethamail', name: 'subethasmtp', version: subethamailVersion

    testRuntimeOnly group: 'ch.qos.reload4j', name: 'reload4j', version: reload4jVersion
    testRuntimeOnly group: 'org.slf4j', name: 'slf4j-reload4j', version: slf4jVersion

    integrationTestImplementation group: 'org.radarbase', name: 'radar-schemas-registration', version: radarSchemasVersion
}

tasks.matching {it instanceof Test}.all {
    testLogging {
        events "skipped", "failed"
        showStandardStreams = true
        showExceptions = true
        showCauses = true
        showStackTraces = true
        exceptionFormat "full"
    }
}

test {
    useJUnit()
}

task integrationTest(type: Test) {
    description = "Run integration tests (located in src/integrationTest/...)."
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    testLogging.events "skipped", "failed", "passed"
}

check.dependsOn integrationTestClasses

tasks.named("processIntegrationTestResources", Copy.class) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
